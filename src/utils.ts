/**
 * File containing all the useful and usable functions to use througouht Lamatomic
 */
import Vue from 'vue'

/**
 * Mounts Vue Component programmatically and returns HTML generated by Vue
 *
 * @param {VueComponent} component Component to mount
 * @param {Object} props Props to use for the given component
 * @param {Object} slots [Optional] Slots eventually populate -> { default: 'My slot content', 'custom-slot': "My custom slot content"}
 *
 * @returns {string} HTML Component rendering
 */
export const getMountedComponent = (
    component: any,
    props: Object,
    slots: Object = {}
): string => {
    const VueCmp = Vue.extend(component)
    const instance = new VueCmp({
        propsData: {
            ...props
        }
    })

    if (Object.keys(slots).length > 0) {
        for (const [key, value] of Object.entries(slots)) {
            instance.$slots[key] = [instance.$createElement('span', [value])]
        }
    }

    return instance.$mount().$el.outerHTML
}

/**
 * Get a random string on given length
 *
 * @param {number} length Length of the generated string
 *
 * @return {string} Random generated string
 */
export const getRandom = (length: number = 5): string => {
    return Math.random()
        .toString(36)
        .substr(2, length)
}

/**
 * Check if given URL is valid
 *
 * @param {string} url URL to check
 *
 * @return {Boolean} True if URL is valid, else false
 */
export const isValidUrl = (url: string): Boolean => {
    const pattern = new RegExp(
        '^(https?:\\/\\/)?' + // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
        '(\\#[-a-z\\d_]*)?$', // fragment locator
        'i'
    )

    return !!pattern.test(url)
}

/**
 * Check if given Image Path is valid
 *
 * @param {string} imagePath Image Path to check
 *
 * @return {Boolean} True if image path is valid, else false
 */
export const isValidImagePath = (imagePath: string): Boolean => {
    const pattern = new RegExp(/[/.](gif|jpg|jpeg|tiff|png|svg)$/, 'i')

    return !!pattern.test(imagePath)
}
